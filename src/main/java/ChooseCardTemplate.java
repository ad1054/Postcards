import ij.IJ;
import ij.ImagePlus;
import ij.io.OpenDialog;

/*
 * ChooseCardTemplate.java
 *
 * Created on Jun 16, 2012, 5:31:50 PM
 */
/**
 * Copyright Jun 7, 2012 The GAIA Group
 * http://gaiag.net
 *
 * @author chris
 */

public class ChooseCardTemplate extends javax.swing.JFrame {

    /** Creates new form ChooseCardTemplate */
    public ChooseCardTemplate() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ChoiceLabel = new javax.swing.JLabel();
        OnePhotoPanel = new javax.swing.JPanel();
        OnePhotoLabel = new javax.swing.JLabel();
        horizontal1Label = new javax.swing.JLabel();
        vertical1Label = new javax.swing.JLabel();
        twoPhotoPanel = new javax.swing.JPanel();
        TwoPhotoLabel = new javax.swing.JLabel();
        vertical2Label = new javax.swing.JLabel();
        horizontal2Label = new javax.swing.JLabel();
        threePhotoPanel = new javax.swing.JPanel();
        ThreePhotoLabel = new javax.swing.JLabel();
        vertical1horizontal2Label = new javax.swing.JLabel();
        vertical2horizontal1Label = new javax.swing.JLabel();
        fourPhotoPanel = new javax.swing.JPanel();
        FourPhotoLabel = new javax.swing.JLabel();
        horizontal4Label = new javax.swing.JLabel();
        vertical4Label = new javax.swing.JLabel();
        HomePanel = new javax.swing.JPanel();
        HomeLabel = new javax.swing.JLabel();
        dataDeviceLabel = new javax.swing.JLabel();
        egLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(31, 73, 125));
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setPreferredSize(new java.awt.Dimension(1920, 1080));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        ChoiceLabel.setBackground(new java.awt.Color(79, 129, 189));
        ChoiceLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        ChoiceLabel.setForeground(new java.awt.Color(230, 224, 236));
        ChoiceLabel.setText("Chose a template:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.ipady = 34;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(ChoiceLabel, gridBagConstraints);

        OnePhotoPanel.setBackground(new java.awt.Color(79, 129, 189));
        OnePhotoPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        OnePhotoLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        OnePhotoLabel.setForeground(new java.awt.Color(230, 224, 236));
        OnePhotoLabel.setText("One photo");

        horizontal1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pcH1.jpg"))); // NOI18N
        horizontal1Label.setText("jLabel1");
        horizontal1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                horizontal1Clicked(evt);
            }
        });

        vertical1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pcV1.jpg"))); // NOI18N
        vertical1Label.setText("jLabel1");
        vertical1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vertical1Clicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout OnePhotoPanelLayout = new org.jdesktop.layout.GroupLayout(OnePhotoPanel);
        OnePhotoPanel.setLayout(OnePhotoPanelLayout);
        OnePhotoPanelLayout.setHorizontalGroup(
            OnePhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(OnePhotoPanelLayout.createSequentialGroup()
                .add(OnePhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(OnePhotoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(horizontal1Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 182, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(vertical1Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(OnePhotoPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(OnePhotoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        OnePhotoPanelLayout.setVerticalGroup(
            OnePhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(OnePhotoPanelLayout.createSequentialGroup()
                .add(OnePhotoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(OnePhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(vertical1Label)
                    .add(horizontal1Label))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 60, 0, 0);
        getContentPane().add(OnePhotoPanel, gridBagConstraints);

        twoPhotoPanel.setBackground(new java.awt.Color(79, 129, 189));
        twoPhotoPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        TwoPhotoLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        TwoPhotoLabel.setForeground(new java.awt.Color(230, 224, 236));
        TwoPhotoLabel.setText("Two photos");

        vertical2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pcV2.jpg"))); // NOI18N
        vertical2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vertical2Clicked(evt);
            }
        });

        horizontal2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pcH2.jpg"))); // NOI18N
        horizontal2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                horizontal2Clicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout twoPhotoPanelLayout = new org.jdesktop.layout.GroupLayout(twoPhotoPanel);
        twoPhotoPanel.setLayout(twoPhotoPanelLayout);
        twoPhotoPanelLayout.setHorizontalGroup(
            twoPhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(twoPhotoPanelLayout.createSequentialGroup()
                .add(twoPhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(twoPhotoPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(TwoPhotoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(twoPhotoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(vertical2Label)
                        .add(18, 18, 18)
                        .add(horizontal2Label)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        twoPhotoPanelLayout.setVerticalGroup(
            twoPhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(twoPhotoPanelLayout.createSequentialGroup()
                .add(TwoPhotoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(twoPhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(horizontal2Label)
                    .add(vertical2Label))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 24, 0, 6);
        getContentPane().add(twoPhotoPanel, gridBagConstraints);

        threePhotoPanel.setBackground(new java.awt.Color(79, 129, 189));
        threePhotoPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ThreePhotoLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        ThreePhotoLabel.setForeground(new java.awt.Color(230, 224, 236));
        ThreePhotoLabel.setText("Three photos");

        vertical1horizontal2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pcV1H2.jpg"))); // NOI18N
        vertical1horizontal2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vertical1Horizontal2Clicked(evt);
            }
        });

        vertical2horizontal1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pcV2H1.jpg"))); // NOI18N
        vertical2horizontal1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vertical2horizontal1Clicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout threePhotoPanelLayout = new org.jdesktop.layout.GroupLayout(threePhotoPanel);
        threePhotoPanel.setLayout(threePhotoPanelLayout);
        threePhotoPanelLayout.setHorizontalGroup(
            threePhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(threePhotoPanelLayout.createSequentialGroup()
                .add(threePhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(threePhotoPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(ThreePhotoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(threePhotoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(vertical1horizontal2Label)
                        .add(18, 18, 18)
                        .add(vertical2horizontal1Label)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        threePhotoPanelLayout.setVerticalGroup(
            threePhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(threePhotoPanelLayout.createSequentialGroup()
                .add(ThreePhotoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(threePhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(vertical2horizontal1Label)
                    .add(vertical1horizontal2Label))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 60, 0, 0);
        getContentPane().add(threePhotoPanel, gridBagConstraints);

        fourPhotoPanel.setBackground(new java.awt.Color(79, 129, 189));
        fourPhotoPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        FourPhotoLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        FourPhotoLabel.setForeground(new java.awt.Color(230, 224, 236));
        FourPhotoLabel.setText("Four photos");

        horizontal4Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pcH4.jpg"))); // NOI18N
        horizontal4Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                horizontal4Clicked(evt);
            }
        });

        vertical4Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pcV4.jpg"))); // NOI18N
        vertical4Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vertical4Clicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout fourPhotoPanelLayout = new org.jdesktop.layout.GroupLayout(fourPhotoPanel);
        fourPhotoPanel.setLayout(fourPhotoPanelLayout);
        fourPhotoPanelLayout.setHorizontalGroup(
            fourPhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fourPhotoPanelLayout.createSequentialGroup()
                .add(fourPhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fourPhotoPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(FourPhotoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(fourPhotoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(horizontal4Label)
                        .add(18, 18, 18)
                        .add(vertical4Label)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fourPhotoPanelLayout.setVerticalGroup(
            fourPhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fourPhotoPanelLayout.createSequentialGroup()
                .add(FourPhotoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fourPhotoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(vertical4Label)
                    .add(horizontal4Label))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 24, 0, 6);
        getContentPane().add(fourPhotoPanel, gridBagConstraints);

        HomePanel.setBackground(new java.awt.Color(79, 129, 189));
        HomePanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        HomePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HomeClicked(evt);
            }
        });

        HomeLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        HomeLabel.setForeground(new java.awt.Color(230, 224, 236));
        HomeLabel.setText("Home");

        org.jdesktop.layout.GroupLayout HomePanelLayout = new org.jdesktop.layout.GroupLayout(HomePanel);
        HomePanel.setLayout(HomePanelLayout);
        HomePanelLayout.setHorizontalGroup(
            HomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, HomePanelLayout.createSequentialGroup()
                .addContainerGap(176, Short.MAX_VALUE)
                .add(HomeLabel)
                .addContainerGap())
        );
        HomePanelLayout.setVerticalGroup(
            HomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(HomePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(HomeLabel)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 147;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 60, 15, 0);
        getContentPane().add(HomePanel, gridBagConstraints);

        dataDeviceLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        dataDeviceLabel.setForeground(new java.awt.Color(230, 224, 236));
        dataDeviceLabel.setText("Please connect your data device");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 6, 0, 0);
        getContentPane().add(dataDeviceLabel, gridBagConstraints);

        egLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        egLabel.setForeground(new java.awt.Color(230, 224, 236));
        egLabel.setText("(e.g.,  USB-stick, SB card, etc.)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(egLabel, gridBagConstraints);

        pack();
    }// </editor-fold>

    private void horizontal1Clicked(java.awt.event.MouseEvent evt) {                                    

        ImagePlus h1 = null;
        int type = 0;
        h1 = openImageSet(type, h1);
        
        horizontal = true;

        IJ.run(h1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        h1 = setScale(h1, horizonWidth, horizonHeight);

        setToPostCard(h1, 0);

    }                                   

    private void HomeClicked(java.awt.event.MouseEvent evt) {                             

        AAPC_Var.showPostCard();
        AAPC_Var.hideChooseCard();

    }                            

    private void vertical1Clicked(java.awt.event.MouseEvent evt) {                                  

        ImagePlus v1 = null;
        int type = 0;
        v1 = openImageSet(type, v1);
        
        horizontal = false;

        IJ.run(v1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        v1 = setScale(v1, verticalWidth, verticalHeight);

        setToPostCard(v1, 1);

    }                                 

    private void vertical2Clicked(java.awt.event.MouseEvent evt) {                                  

        ImagePlus v1 = null;
        int type = 1;
        v1 = openImageSet(type, v1);
        
        horizontal = true;

        IJ.run(v1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        int pcW1 = v1.getWidth();
        int pcH1 = v1.getHeight();

        ImagePlus v2 = null;
        type = 2;
        v2 = openImageSet(type, v2);

        IJ.run(v2, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        int pcW2 = v2.getWidth();
        int pcH2 = v2.getHeight();

        setToPostCardV(v1, v2, pcW1, pcH1, pcW2, pcH2,
                horizonWidth, horizonHeight, pcHW, pcHH);

    }                                 

    private void horizontal2Clicked(java.awt.event.MouseEvent evt) {                                    

        ImagePlus h1 = null;
        int type = 1;
        h1 = openImageSet(type, h1);
        
        horizontal = false;

        IJ.run(h1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        int pcW1 = h1.getWidth();
        int pcH1 = h1.getHeight();

        ImagePlus h2 = null;
        type = 2;
        h2 = openImageSet(type, h2);

        IJ.run(h2, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        int pcW2 = h2.getWidth();
        int pcH2 = h2.getHeight();

        setToPostCardH(h1, h2, pcW1, pcH1, pcW2, pcH2);

    }                                   

    private void vertical1Horizontal2Clicked(java.awt.event.MouseEvent evt) {                                             

        ImagePlus v1 = null;
        int type = 1;
        v1 = openImageSet(type, v1);
        
        horizontal = true;

        IJ.run(v1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        ImagePlus h1 = null;
        type = 2;
        h1 = openImageSet(type, h1);

        IJ.run(h1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        ImagePlus h2 = null;
        type = 3;
        h2 = openImageSet(type, h2);

        IJ.run(h2, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        setToPostCardV1H2(v1, h1, h2);

    }                                            

    private void vertical2horizontal1Clicked(java.awt.event.MouseEvent evt) {                                             

        ImagePlus v1 = null;
        int type = 1;
        v1 = openImageSet(type, v1);
        
        horizontal = false;

        IJ.run(v1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        ImagePlus v2 = null;
        type = 2;
        v2 = openImageSet(type, v2);

        IJ.run(v2, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        ImagePlus h1 = null;
        type = 3;
        h1 = openImageSet(type, h1);

        IJ.run(h1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        setToPostCardV2H1(v1, v2, h1);

    }                                            

    private void horizontal4Clicked(java.awt.event.MouseEvent evt) {                                    

        ImagePlus h1 = null;
        int type = 1;
        h1 = openImageSet(type, h1);
        
        horizontal = true;

        IJ.run(h1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        int pcW1 = h1.getWidth();
        int pcH1 = h1.getHeight();

        ImagePlus h2 = null;
        type = 2;
        h2 = openImageSet(type, h2);

        IJ.run(h2, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        int pcW2 = h2.getWidth();
        int pcH2 = h2.getHeight();

        ImagePlus h3 = null;
        type = 3;
        h3 = openImageSet(type, h3);

        IJ.run(h3, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        int pcW3 = h3.getWidth();
        int pcH3 = h3.getHeight();

        ImagePlus h4 = null;
        type = 4;
        h4 = openImageSet(type, h4);

        IJ.run(h4, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        int pcW4 = h4.getWidth();
        int pcH4 = h4.getHeight();

        setToPostCardH4(h1, h2, h3, h4);

    }                                   

    private void vertical4Clicked(java.awt.event.MouseEvent evt) {                                  

        ImagePlus v1 = null;
        int type = 1;
        v1 = openImageSet(type, v1);
        
        horizontal = false;

        IJ.run(v1, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        ImagePlus v2 = null;
        type = 2;
        v2 = openImageSet(type, v2);

        IJ.run(v2, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        ImagePlus v3 = null;
        type = 3;
        v3 = openImageSet(type, v3);

        IJ.run(v3, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        ImagePlus v4 = null;
        type = 4;
        v4 = openImageSet(type, v4);

        IJ.run(v4, "Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

        setToPostCardV4(v1, v2, v3, v4);

    }                                 

    private ImagePlus openImageSet(int type, ImagePlus ip) {

        String s = "Select the Postcard Image";

        switch (type) {

            case 0:
                s = "Select the Postcard Image";
                break;

            case 1:
                s = "Select the first Postcard Image";
                break;

            case 2:
                s = "Select the second Postcard Image";
                break;

            case 3:
                s = "Select the third Postcard Image";
                break;

            case 4:
                s = "Select the forth Postcard Image";
                break;
        }

        OpenDialog opendialog = new OpenDialog(s, "");

        resultsPath = IJ.getDirectory("home");
        String s2 = opendialog.getDirectory();
        String s3 = opendialog.getFileName();

        ip = IJ.openImage(s2 + s3);

        return ip;

    }

    private void setToPostCard(ImagePlus ip, int key) {

        int pcW = 0, pcH = 0, Width = 0, Height = 0;

        if (key == 0) {
            pcW = 1800;
            pcH = 1200;
            Width = 1750;
            Height = 1150;

        } else {
            pcW = 1200;
            pcH = 1800;
            Width = 1150;
            Height = 1750;

        }

        ImagePlus pc = IJ.createImage("PostCard", "RGB White", pcW, pcH, 1);
        IJ.run(ip, "Copy", "");
        pc.setRoi(25, 25, Width, Height);
        IJ.run(pc, "Paste", "");
        IJ.run("Colors...", "foreground=black background=white selection=yellow");
        pc.setRoi(25, 25, Width, Height);
        IJ.run(pc, "Clear Outside", "");
        IJ.run(pc, "Select None", "");
        pc.show();
        storeImage(pc);

    }

    private void setToPostCardV(ImagePlus v1, ImagePlus v2,
            int pcW1, int pcH1, int pcW2, int pcH2,
            int vWidth, int vHeight, int pcVW, int pcVH) {

        double halfw = (double) (vWidth / 2) - 10;
        double halfpc = (double) pcVW / 2;
        double im1ratio = (double) pcW1 / pcH1;
        double im2ratio = (double) pcW2 / pcH2;
        double pcratio = (double) halfw / vHeight;

        v1 = verticalScale(v1, halfw, vHeight, pcW1, pcH1, im1ratio, pcratio);

        v2 = verticalScale(v2, halfw, vHeight, pcW2, pcH2, im2ratio, pcratio);

        ImagePlus pc = IJ.createImage("PostCard", "RGB White", pcVW, pcVH, 1);
        IJ.run(v1, "Copy", "");
        pc.setRoi(25, 25, (int) halfw, vHeight);
        IJ.run(pc, "Paste", "");
        IJ.run("Colors...", "foreground=black background=white selection=yellow");

        IJ.run(v2, "Copy", "");
        pc.setRoi((int) halfpc + 10, 25, (int) halfw, vHeight);
        IJ.run(pc, "Paste", "");

        IJ.run(pc, "Select None", "");
        pc.show();
        storeImage(pc);

    }

    private ImagePlus verticalScale(ImagePlus v1, double halfw, int vHeight,
            int pcW, int pcH, double imratio, double pcratio) {

        if (imratio == pcratio) {

            int hw = (int) halfw;
            int hh = (int) vHeight;

            scaleImage(v1, hw, hh);

        } else if (imratio > pcratio) {

            double imh = (double) vHeight;
            double imw = (double) (vHeight * pcW) / pcH;

            int hw = (int) imw;
            int hh = (int) imh;

            scaleImage(v1, hw, hh);

            cropImage(v1, halfw, vHeight);

        } else if (imratio < pcratio) {

            double imw = (double) halfw;
            double imh = (double) (halfw * pcH) / pcW;

            int hw = (int) imw;
            int hh = (int) imh;

            scaleImage(v1, hw, hh);

            cropImage(v1, halfw, vHeight);

        }

        return v1;
    }

    private void setToPostCardH(ImagePlus h1, ImagePlus h2,
            int pcW1, int pcH1, int pcW2, int pcH2) {

        double halfpc = (double) pcVH / 2;

        h1 = setScale(h1, verticalWidth, halfVheight);

        h2 = setScale(h2, verticalWidth, halfVheight);

        ImagePlus pc = IJ.createImage("PostCard", "RGB White", pcVW, pcVH, 1);
        IJ.run(h1, "Copy", "");
        pc.setRoi(25, 25, verticalWidth, halfVheight);
        IJ.run(pc, "Paste", "");
        IJ.run("Colors...", "foreground=black background=white selection=yellow");

        IJ.run(h2, "Copy", "");

        int n1 = (int) halfpc + 5;
        pc.setRoi(25, n1, verticalWidth, halfVheight);
        IJ.run(pc, "Paste", "");

        IJ.run(pc, "Select None", "");
        pc.show();
        storeImage(pc);

    }

    private void setToPostCardV1H2(ImagePlus v1, ImagePlus h1, ImagePlus h2) {

        double halfHpc = (double) pcHW / 2;
        double halfVpc = (double) pcHH / 2;

        v1 = setScale(v1, halfHwidth, horizonHeight);

        h1 = setScale(h1, halfHwidth, halfHheight);

        h2 = setScale(h2, halfHwidth, halfHheight);

        ImagePlus pc = IJ.createImage("PostCard", "RGB White", pcHW, pcHH, 1);
        IJ.run(v1, "Copy", "");
        pc.setRoi(25, 25, halfHwidth, horizonHeight);
        IJ.run(pc, "Paste", "");

        IJ.run(h1, "Copy", "");

        int n1 = (int) halfHpc + 5;
        pc.setRoi(n1, 25, halfHwidth, halfHheight);
        IJ.run(pc, "Paste", "");

        IJ.run(h2, "Copy", "");

        int n2 = (int) (halfVpc + 5);
        pc.setRoi(n1, n2, halfHwidth, halfHheight);
        IJ.run(pc, "Paste", "");

        IJ.run(pc, "Select None", "");
        pc.show();
        storeImage(pc);

    }

    private void setToPostCardV2H1(ImagePlus v1, ImagePlus v2, ImagePlus h1) {

        double halfHpc = (double) pcVW / 2;
        double halfVpc = (double) pcVH / 2;

        v1 = setScale(v1, halfVwidth, halfVheight);

        v2 = setScale(v2, halfVwidth, halfVheight);

        h1 = setScale(h1, verticalWidth, halfVheight);

        ImagePlus pc = IJ.createImage("PostCard", "RGB White", pcVW, pcVH, 1);
        IJ.run(v1, "Copy", "");
        pc.setRoi(25, 25, halfVwidth, halfVheight);
        IJ.run(pc, "Paste", "");

        IJ.run(v2, "Copy", "");

        int n1 = (int) halfHpc + 5;
        pc.setRoi(n1, 25, halfVwidth, halfVheight);
        IJ.run(pc, "Paste", "");

        IJ.run(h1, "Copy", "");

        int n2 = (int) (halfVpc + 5);
        pc.setRoi(25, n2, verticalWidth, halfVheight);
        IJ.run(pc, "Paste", "");

        IJ.run(pc, "Select None", "");
        pc.show();
        storeImage(pc);

    }

    private void setToPostCardH4(ImagePlus h1, ImagePlus h2,
            ImagePlus h3, ImagePlus h4) {

        double halfHpc = (double) pcHW / 2;
        double halfVpc = (double) pcHH / 2;

        h1 = setScale(h1, halfHwidth, halfHheight);

        h2 = setScale(h2, halfHwidth, halfHheight);

        h3 = setScale(h3, halfHwidth, halfHheight);

        h4 = setScale(h4, halfHwidth, halfHheight);

        ImagePlus pc = IJ.createImage("PostCard", "RGB White", pcHW, pcHH, 1);
        IJ.run(h1, "Copy", "");
        pc.setRoi(25, 25, halfHwidth, halfHheight);
        IJ.run(pc, "Paste", "");

        IJ.run(h2, "Copy", "");

        int n1 = (int) halfHpc + 5;
        pc.setRoi(n1, 25, halfHwidth, halfHheight);
        IJ.run(pc, "Paste", "");

        IJ.run(h3, "Copy", "");

        int n2 = (int) (halfVpc + 5);
        pc.setRoi(25, n2, halfHwidth, halfHheight);
        IJ.run(pc, "Paste", "");

        IJ.run(h4, "Copy", "");

        pc.setRoi(n1, n2, halfHwidth, halfHheight);
        IJ.run(pc, "Paste", "");

        IJ.run(pc, "Select None", "");
        pc.show();
        storeImage(pc);

    }

    private void setToPostCardV4(ImagePlus v1, ImagePlus v2,
            ImagePlus v3, ImagePlus v4) {

        double halfHpc = (double) pcVW / 2;
        double halfVpc = (double) pcVH / 2;

        v1 = setScale(v1, halfVwidth, halfVheight);

        v2 = setScale(v2, halfVwidth, halfVheight);

        v3 = setScale(v3, halfVwidth, halfVheight);

        v4 = setScale(v4, halfVwidth, halfVheight);

        ImagePlus pc = IJ.createImage("PostCard", "RGB White", pcVW, pcVH, 1);
        IJ.run(v1, "Copy", "");
        pc.setRoi(25, 25, halfVwidth, halfVheight);
        IJ.run(pc, "Paste", "");

        IJ.run(v2, "Copy", "");

        int n1 = (int) halfHpc + 5;
        pc.setRoi(n1, 25, halfVwidth, halfVheight);
        IJ.run(pc, "Paste", "");

        IJ.run(v3, "Copy", "");

        int n2 = (int) (halfVpc + 5);
        pc.setRoi(25, n2, halfVwidth, halfVheight);
        IJ.run(pc, "Paste", "");

        IJ.run(v4, "Copy", "");

        pc.setRoi(n1, n2, halfVwidth, halfVheight);
        IJ.run(pc, "Paste", "");

        IJ.run(pc, "Select None", "");
        pc.show();
        storeImage(pc);

    }

    private ImagePlus setScale(ImagePlus ip1,
            int setW, int setH) {

        int pcW = ip1.getWidth();
        int pcH = ip1.getHeight();
        double imw = setW;
        double imh = setH;
        double imratio = (double) pcW / pcH;
        double pcratio = (double) setW / setH;

        if (imratio > pcratio) {

            imw = (double) (setH * pcW) / pcH;

        } else {

            imh = (double) (setW * pcH) / pcW;

        }

        int iw = (int) imw;
        int ih = (int) imh;

        scaleImage(ip1, iw, ih);

        cropImage(ip1, setW, setH);

        return ip1;

    }

    private void scaleImage(ImagePlus ip, int iw, int ih) {

        IJ.run(ip, "Size...", "width=" + iw + " height=" + ih
                + " constrain average interpolation=Bilinear");

        if (ip.getWidth() < iw || ip.getHeight() < ih) {
            IJ.run(ip, "Size...", "width=" + iw
                    + " height=" + ih
                    + " average interpolation=Bilinear");
        }

    }

    private void cropImage(ImagePlus ip, double w, int h) {

        ip.setRoi(0, 0, (int) w, h);

        IJ.run(ip, "Crop", "");

    }

    private void storeImage(ImagePlus ip) {
        
        int backKey = 0;
        AAPC_Var.setBackKey(backKey);

        FinalizePC fpc = new FinalizePC();
        AAPC_Var.putFinalizePC(fpc);
    
        AAPC_Var.hideChooseCard();
        
        AAPC_Var.showFinalize();
        
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseCardTemplate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseCardTemplate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseCardTemplate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseCardTemplate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ChooseCardTemplate().setVisible(true);
            }
        });
    }
    // Global variables
    int CardType;
    // Variables declaration - do not modify
    private javax.swing.JLabel ChoiceLabel;
    private javax.swing.JLabel FourPhotoLabel;
    private javax.swing.JLabel HomeLabel;
    private javax.swing.JPanel HomePanel;
    private javax.swing.JLabel OnePhotoLabel;
    private javax.swing.JPanel OnePhotoPanel;
    private javax.swing.JLabel ThreePhotoLabel;
    private javax.swing.JLabel TwoPhotoLabel;
    private javax.swing.JLabel dataDeviceLabel;
    private javax.swing.JLabel egLabel;
    private javax.swing.JPanel fourPhotoPanel;
    private javax.swing.JLabel horizontal1Label;
    private javax.swing.JLabel horizontal2Label;
    private javax.swing.JLabel horizontal4Label;
    private javax.swing.JPanel threePhotoPanel;
    private javax.swing.JPanel twoPhotoPanel;
    private javax.swing.JLabel vertical1Label;
    private javax.swing.JLabel vertical1horizontal2Label;
    private javax.swing.JLabel vertical2Label;
    private javax.swing.JLabel vertical2horizontal1Label;
    private javax.swing.JLabel vertical4Label;
    // End of variables declaration

    //global variables
    PostCard postc;
    ChooseCardTemplate cct;
    String resultsPath;
    Boolean horizontal;
    int horizonWidth = 1750, horizonHeight = 1150,
            verticalWidth = 1150, verticalHeight = 1750,
            halfHwidth = 865, halfHheight = 565,
            halfVwidth = 565, halfVheight = 865,
            pcHW = 1800, pcHH = 1200,
            pcVW = 1200, pcVH = 1800,
            fullHratio = 1750 / 1150, fullVratio = 1150 / 1750,
            halfHratio = 865 / 1150, halfVratio = 1150 / 865,
            quarterH = 865 / 565, quarterV = 565 / 865;
    int counter = 0;

    void changeText(int language) {

        String s0 = null, s1 = null, s2 = null, s3 = null,
                s4 = null, s5 = null, s6 = null, s7 = null;

        switch (language) {

            case 0:

                s0 = "Choose a template:";

                s1 = "Please connect your data device";

                s2 = "(e.g.,  USB-stick, SB card, etc.)";

                s3 = "One photo";

                s4 = "Two photos";

                s5 = "Three photos";

                s6 = "Four photos";

                s7 = "Home";

                break;

            case 1:

                s0 = "noch nicht";

                s1 = "noch nicht";

                s2 = "noch nicht";

                s3 = "noch nicht";

                s4 = "noch nicht";

                s5 = "noch nicht";

                s6 = "noch nicht";

                s7 = "noch nicht";

                break;

            case 2:

                s0 = "Spanish";

                s1 = "Spanish";

                s2 = "Spanish";

                s3 = "Spanish";

                s4 = "Spanish";

                s5 = "Spanish";

                s6 = "Spanish";

                s7 = "Spanish";

                break;

            case 3:

                s0 = "Italian";

                s1 = "Italian";

                s2 = "Italian";

                s3 = "Italian";

                s4 = "Italian";

                s5 = "Italian";

                s6 = "Italian";

                s7 = "Italian";

                break;

        }

        setTextLines(s0, s1, s2, s3, s4, s5, s6, s7);

    }

    private void setTextLines(String s0, String s1, String s2, String s3, String s4, String s5, String s6, String s7) {

        ChoiceLabel.setText(s0);

        dataDeviceLabel.setText(s1);

        egLabel.setText(s2);

        OnePhotoLabel.setText(s3);

        TwoPhotoLabel.setText(s4);

        ThreePhotoLabel.setText(s5);

        FourPhotoLabel.setText(s6);

        HomeLabel.setText(s7);

    }

    void postcardTransfer(PostCard pc, ChooseCardTemplate ct) {

        postc = pc;

        cct = ct;

    }
}