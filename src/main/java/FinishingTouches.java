import ij.IJ;
import ij.ImagePlus;
import ij.WindowManager;
import ij.gui.ImageCanvas;
import ij.gui.ImageRoi;
import ij.gui.ImageWindow;
import ij.gui.Overlay;
import ij.gui.Roi;
import ij.measure.ResultsTable;
import ij.plugin.Duplicator;
import ij.plugin.ImageCalculator;
import ij.plugin.filter.Analyzer;
import ij.plugin.frame.RoiManager;
import ij.process.ImageProcessor;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.DirectColorModel;
import javax.swing.Timer;
import java.util.TimerTask;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;

/*
 * FinishingTouches.java
 *
 * Created on Jul 7, 2012, 7:16:11 PM
 */
/**
 * Copyright Jun 7, 2012 The GAIA Group
 * http://gaiag.net
 *
 * @author chris
 */
public class FinishingTouches extends javax.swing.JFrame
        implements MouseListener, MouseMotionListener {

    // Global Variables
    ImagePlus imp, img, pcs,
            imj, ipl, ipm;
    ImageProcessor crop;
    int language, angle = 0;
    ;
    int x0, y0, pcX, pcY,
            outX, outY,
            iter, rotate,
            dimOutline,
            outW, outH,
            hypotenuse;
    int[][] allOutlines, borders;
    double[] borderValues;
    boolean noOutline, redo = false,
            resize = false, refresh = false,
            text = false, start = false,
            isolate = false,
            rotation = true, spin = false,
            spinback = false;
    ImageCanvas canvas;
    Roi outline;
    RoiManager roiman;
    Overlay overlay;
    ImageRoi imageRoi;
    Timer repeatTimer;

    /** Creates new form FinishingTouches */
    public FinishingTouches() {
        initComponents();

        startUp();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        informationScrollPane = new javax.swing.JScrollPane();
        informationTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        counterClockwiseButton = new javax.swing.JButton();
        clockwiseButton = new javax.swing.JButton();
        textButton = new javax.swing.JButton();
        justFinishButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        subjectToggleButton = new javax.swing.JToggleButton();
        iplToggleButton = new javax.swing.JToggleButton();
        pcsToggleButton = new javax.swing.JToggleButton();
        ipmToggleButton = new javax.swing.JToggleButton();
        imjToggleButton = new javax.swing.JToggleButton();
        overlayToggleButton = new javax.swing.JToggleButton();
        outlineROIToggleButton = new javax.swing.JToggleButton();
        pixelBorderToggleButton = new javax.swing.JToggleButton();
        backButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 255));

        informationScrollPane.setBackground(new java.awt.Color(50, 150, 255));

        informationTextArea.setBackground(new java.awt.Color(50, 150, 255));
        informationTextArea.setColumns(20);
        informationTextArea.setEditable(false);
        informationTextArea.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        informationTextArea.setForeground(new java.awt.Color(255, 255, 255));
        informationTextArea.setLineWrap(true);
        informationTextArea.setRows(5);
        informationTextArea.setText("1. Click and drag on the subject to change the position.  \n2. Click and drag the handles (corners) to change the size.\n3. To rotate the subject, when the position and size are correct, click the clockwise or counterclockwise buttons.\n4. When complete, click the \"Add a message...\" or \"Just finish...\" button.");
        informationTextArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        informationScrollPane.setViewportView(informationTextArea);

        jPanel1.setBackground(new java.awt.Color(50, 150, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Change Subject Rotation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 24), new java.awt.Color(255, 255, 255))); // NOI18N

        counterClockwiseButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        counterClockwiseButton.setText("Counterclockwise");
        counterClockwiseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                counterClockwiseButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                counterClockwiseButtonMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                counterClockwiseButtonMouseClicked(evt);
            }
        });
        counterClockwiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                counterClockwiseButtonActionPerformed(evt);
            }
        });

        clockwiseButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        clockwiseButton.setText("Clockwise");
        clockwiseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clockwiseButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                clockwiseButtonMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clockwiseButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clockwiseButtonMouseEntered(evt);
            }
        });
        clockwiseButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                clockwiseButtonStateChanged(evt);
            }
        });
        clockwiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clockwiseButtonActionPerformed(evt);
            }
        });
        clockwiseButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clockwiseButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clockwiseButtonKeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(clockwiseButton)
                .add(18, 18, 18)
                .add(counterClockwiseButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {clockwiseButton, counterClockwiseButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(clockwiseButton)
                .add(counterClockwiseButton))
        );

        textButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        textButton.setText("Add a message to the card front");
        textButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textButtonActionPerformed(evt);
            }
        });

        justFinishButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        justFinishButton.setText("Just finish without message");
        justFinishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                justFinishButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(50, 150, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Developer Area.  Don't mess with it!", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        subjectToggleButton.setText("subject");
        subjectToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectToggleButtonActionPerformed(evt);
            }
        });

        iplToggleButton.setText("ipl");
        iplToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplToggleButtonActionPerformed(evt);
            }
        });

        pcsToggleButton.setText("pcs");
        pcsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcsToggleButtonActionPerformed(evt);
            }
        });

        ipmToggleButton.setText("ipm");
        ipmToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipmToggleButtonActionPerformed(evt);
            }
        });

        imjToggleButton.setText("imj");
        imjToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imjToggleButtonActionPerformed(evt);
            }
        });

        overlayToggleButton.setText("overlay");
        overlayToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlayToggleButtonActionPerformed(evt);
            }
        });

        outlineROIToggleButton.setText("outlineROI");
        outlineROIToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlineROIToggleButtonActionPerformed(evt);
            }
        });

        pixelBorderToggleButton.setText("pixelBorder");
        pixelBorderToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pixelBorderToggleButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(subjectToggleButton)
                            .add(pcsToggleButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ipmToggleButton)
                            .add(iplToggleButton)))
                    .add(imjToggleButton))
                .add(14, 14, 14)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(overlayToggleButton)
                    .add(outlineROIToggleButton)
                    .add(pixelBorderToggleButton))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {imjToggleButton, pcsToggleButton, subjectToggleButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel2Layout.linkSize(new java.awt.Component[] {outlineROIToggleButton, overlayToggleButton, pixelBorderToggleButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(overlayToggleButton)
                    .add(subjectToggleButton)
                    .add(iplToggleButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(outlineROIToggleButton)
                    .add(pcsToggleButton)
                    .add(ipmToggleButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(pixelBorderToggleButton)
                    .add(imjToggleButton)))
        );

        backButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        homeButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 346, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(textButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 341, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(backButton)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(homeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 159, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, justFinishButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 341, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(29, 29, 29))
                    .add(layout.createSequentialGroup()
                        .add(informationScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        layout.linkSize(new java.awt.Component[] {backButton, homeButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(informationScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(textButton)
                .add(4, 4, 4)
                .add(justFinishButton)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(backButton)
                    .add(homeButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20))
        );

        pack();
    }// </editor-fold>                        

    private void textButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           

        IJ.run(imp, "Select None", "");

        imp = IJ.getImage().flatten();

        text = true;

        FinalizePC fpc = new FinalizePC();
        AAPC_Var.putFinalizePC(fpc);

        AAPC_Var.hideFinishingTouches();

        AAPC_Var.showFinalize();

    }                                          

    private void subjectToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    

        JToggleButton btn = (JToggleButton) evt.getSource();

        if (btn.isSelected()) {
            img.show();
        } else {
            img.hide();
        }

    }                                                   

    private void pcsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                

        JToggleButton btn = (JToggleButton) evt.getSource();

        if (btn.isSelected()) {
            pcs.show();
        } else {
            pcs.hide();
        }

    }                                               

    private void imjToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                

        JToggleButton btn = (JToggleButton) evt.getSource();

        if (btn.isSelected()) {
            imj.show();
        } else {
            imj.hide();
        }

    }                                               

    private void iplToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                

        JToggleButton btn = (JToggleButton) evt.getSource();

        if (btn.isSelected()) {
            ipl.show();
        } else {
            ipl.hide();
        }

    }                                               

    private void ipmToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                

        JToggleButton btn = (JToggleButton) evt.getSource();

        if (btn.isSelected()) {
            ipm.show();
        } else {
            ipm.hide();
        }

    }                                               

    private void overlayToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    

        JToggleButton btn = (JToggleButton) evt.getSource();

        if (btn.isSelected()) {

            IJ.run("Hide Overlay", "");

        } else {

            IJ.run("Show Overlay", "");

        }

    }                                                   

    private void outlineROIToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       

        JToggleButton btn = (JToggleButton) evt.getSource();

        if (btn.isSelected()) {

            imp.setRoi(outline);

            Roi roi = imp.getRoi();
            roi.setLocation(pcX + outX, pcY + outY);
            int pxy = pcX + outX, pcy = pcY + outY;

            IJ.log("pcX = " + pcX + "  outX = " + outX + "  pcY = " + pcY + "  outY = " + outY);
            IJ.log("pxy = " + pxy + "  pcy = " + pcy);

        } else {

            IJ.run(imp, "Select None", "");

        }

    }                                                      

    private void pixelBorderToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                        

        JToggleButton btn = (JToggleButton) evt.getSource();

        if (btn.isSelected()) {

            ImageProcessor ip = imp.getProcessor();

            borders = new int[dimOutline][2];
            borderValues = new double[dimOutline];

            for (int i = 0; i < dimOutline; i++) {
                int x = borders[i][0] = allOutlines[i][0] + pcX;
                int y = borders[i][1] = allOutlines[i][1] + pcY;
                borderValues[i] = ip.getPixel(x, y);
                ip.putPixelValue(x, y, 255);
            }

            imp.updateAndDraw();
        } else {

            ImageProcessor ip = imp.getProcessor();

            for (int i = 0; i < dimOutline; i++) {
                int x = allOutlines[i][0] + pcX;
                int y = allOutlines[i][1] + pcY;
                ip.putPixel(x, y, (int) borderValues[i]);
            }

            imp.updateAndDraw();

        }

    }                                                       

    private void counterClockwiseButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       

        angle--;
        rotateSubject(angle);

    }                                                      

    private void clockwiseButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
    }                                               

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        AAPC_Var.hideFinishingTouches();
        AAPC_Var.showWandFrame();
    }                                          

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        AAPC_Var.hideFinishingTouches();
        AAPC_Var.showPostCard();
    }                                          

    private void justFinishButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 

        IJ.run(imp, "Select None", "");

    }                                                

    private void clockwiseButtonMousePressed(java.awt.event.MouseEvent evt) {                                             
// 3

        angle++;
        rotateSubject(angle);

        repeatTimer = new Timer(100, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                angle++;
                rotateSubject(angle);
            }
        });
        repeatTimer.setInitialDelay(100); // start repeating only after 1 second
        repeatTimer.start();

    }                                            

    private void counterClockwiseButtonMousePressed(java.awt.event.MouseEvent evt) {                                                    

        angle--;
        rotateSubject(angle);

        repeatTimer = new Timer(100, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                angle--;
                rotateSubject(angle);
            }
        });
        repeatTimer.setInitialDelay(10); // start repeating only after 1 second
        repeatTimer.start();

    }                                                   

    private void clockwiseButtonMouseReleased(java.awt.event.MouseEvent evt) {                                              

        repeatTimer.stop();

    }                                             

    private void counterClockwiseButtonMouseReleased(java.awt.event.MouseEvent evt) {                                                     

        repeatTimer.stop();

    }                                                    

    private void counterClockwiseButtonMouseClicked(java.awt.event.MouseEvent evt) {                                                    
    }                                                   

    private void clockwiseButtonMouseClicked(java.awt.event.MouseEvent evt) {                                             
    }                                            

    private void clockwiseButtonKeyPressed(java.awt.event.KeyEvent evt) {                                           
    }                                          

    private void clockwiseButtonKeyReleased(java.awt.event.KeyEvent evt) {                                            
    }                                           

    private void clockwiseButtonMouseEntered(java.awt.event.MouseEvent evt) {                                             
    }                                            

    private void clockwiseButtonStateChanged(javax.swing.event.ChangeEvent evt) {                                             
    }                                            

    public void rotateSubject(int a) {

        IJ.run("Rotate...", "angle=" + a);
        IJ.run(imp, "Rotate... ", "angle=" + a
                + " grid=1 interpolation=Bilinear");

// 
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;






                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinishingTouches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinishingTouches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinishingTouches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinishingTouches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FinishingTouches().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton backButton;
    private javax.swing.JButton clockwiseButton;
    private javax.swing.JButton counterClockwiseButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JToggleButton imjToggleButton;
    private javax.swing.JScrollPane informationScrollPane;
    private javax.swing.JTextArea informationTextArea;
    private javax.swing.JToggleButton iplToggleButton;
    private javax.swing.JToggleButton ipmToggleButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton justFinishButton;
    private javax.swing.JToggleButton outlineROIToggleButton;
    private javax.swing.JToggleButton overlayToggleButton;
    private javax.swing.JToggleButton pcsToggleButton;
    private javax.swing.JToggleButton pixelBorderToggleButton;
    private javax.swing.JToggleButton subjectToggleButton;
    private javax.swing.JButton textButton;
    // End of variables declaration                   

    private void startUp() {

        imp = AAPC_Var.getImage();
        img = IJ.getImage(); //AAPC_Var.getSubject(); 

        Roi testRoi = AAPC_Var.getROI();

        int x = AAPC_Var.getPCX();
        int y = AAPC_Var.getPCY();
        int w = (int) AAPC_Var.getPCW();
        int h = (int) AAPC_Var.getPCH();

        imp.setRoi(testRoi);

        int xloc = 400, yloc = 0;

        moveWindow(imp, xloc, yloc);

        final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);

        setupRedo();

        start = true;
        finish();

    }

    public void setupRedo() {

        ImageWindow win = imp.getWindow();
        canvas = win.getCanvas();
        canvas.addMouseListener(this);
        canvas.addMouseMotionListener(this);

        int x = pcX + outX;
        int y = pcY + outY;

        if (redo) {
            imp.setRoi(x, y, outW, outH);
        }

        redo = true;

    }

    private void finish() {

        IJ.run("Appearance...", "  no antialiased menu=0");

        IJ.run(img, "Select None", "");

        int fudge = 1;

        pcs = new Duplicator().run(img);
        img.hide();

        pcs.setTitle("PCsubject");

        pcs.show();

        pcX = AAPC_Var.getPCX();
        pcY = AAPC_Var.getPCY();

        reSize(pcs);

        modifyOutline(pcs);

        outline = clearOutline(pcs);

        if (refresh) {

            pcs.setRoi(outline);
            IJ.run(pcs, "Enlarge...", "enlarge=-1");
            IJ.run(pcs, "Clear Outside", "");

            refresh = false;

        }

        ImagePlus hypot = IJ.createImage("Hypot", "RGB Black", hypotenuse, hypotenuse, 1);

        IJ.run(pcs, "Copy", "");
        IJ.run(hypot, "Paste", "");

//        placeOverlay(hypot);
//
//        angle = 0;
//
//        pcs.hide();
//
//        dumpExtraImages();
//
//        Frame[] frame = WindowManager.getNonImageWindows();
//
//        for (int i = 0; i < frame.length; i++) {
//
//            String s = "ROI Manager";
//
//            String s0 = frame[i].getTitle();
//
//            if (s0.equalsIgnoreCase(s)) {
//                IJ.selectWindow("ROI Manager");
//                IJ.run("Close");
//            }
//
//            s = "Results";
//
//            if (s0.equalsIgnoreCase(s)) {
//                IJ.selectWindow("Results");
//                IJ.run("Close");
//            }
//        }
    }

    private void placeOverlay(ImagePlus ip) {

        ImageProcessor isub = ip.getProcessor();
        isub = isub.duplicate();
        int width = isub.getWidth();
        int height = isub.getHeight();

        // calculate image size to rotate without cutting off subject
        int len = (int) Math.sqrt((width) * (width) + (height) * (height));

        isub = isub.crop();

//        isub = isub.resize(len, len, true);
        isub.setRoi(pcX, pcY, len, len);

        imageRoi = new ImageRoi(pcX, pcY, isub);
        imageRoi.setZeroTransparent(true);

        overlay = new Overlay(imageRoi);
        imp.setOverlay(overlay);
        imp.setRoi(imageRoi);
        imp.show();

    }

    private void setupListener() {

//        img = IJ.getImage();
        ImageWindow win = imp.getWindow();
        ImageCanvas canvas = win.getCanvas();
        canvas.addMouseListener(this);
        canvas.addMouseMotionListener(this);
    }

    private ImagePlus reSize(ImagePlus ima) {

        Roi PCroi = imp.getRoi();

        Rectangle PCrec = PCroi.getBounds();

        pcX = PCrec.x;
        pcY = PCrec.y;

        double subw = img.getWidth();
        double subh = img.getHeight();

        double ht = PCrec.getHeight();
        double wt = (subw / subh) * ht;

        IJ.run(ima, "Size...", "width="
                + wt + " height="
                + ht + " constrain average interpolation=Bilinear");

        return ima;

    }

    private void modifyOutline(ImagePlus ima) {

        ImageProcessor ip = ima.getProcessor();

        int w = ima.getWidth();
        int h = ima.getHeight();

        iter = 1;

        for (int i = 0; i < iter; i++) {

            int count = 0;

            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {
                    if (x > 0 && x < (w - 1)) {
                        int v0 = ip.getPixel(x - 1, y);
                        int v1 = ip.getPixel(x, y);
                        int v2 = ip.getPixel(x + 1, y);

                        if (v0 == 0 && v1 != 0 && v2 != 0) {
                            count++;
                        }

                        if (v0 != 0 && v1 != 0 && v2 == 0) {
                            count++;
                        }
                    }
                }
            }

            int outlineX[] = new int[count];
            int outlineY[] = new int[count];
            int outlineV[] = new int[count];
            int c = 0;

            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {
                    if (x > 0 && x < (w - 1)) {
                        int v0 = ip.getPixel(x - 1, y);
                        int v1 = ip.getPixel(x, y);
                        int v2 = ip.getPixel(x + 1, y);

                        if (v0 == 0 && v1 != 0 && v2 != 0) {

                            outlineX[c] = x;
                            outlineY[c] = y;
                            outlineV[c] = v2;
                            c++;
                        }

                        if (v0 != 0 && v1 != 0 && v2 == 0) {

                            outlineX[c] = x;
                            outlineY[c] = y;
                            outlineV[c] = v0;
                            c++;
                        }
                    }
                }
            }

            c = 0;
            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {

                    if (c < count && outlineX[c] == x && outlineY[c] == y) {

                        ip.putPixel(x, y, 0);

                        c++;
                    }
                }
            }

            count = 0;

            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {
                    if (y > 0 && y < (h - 1)) {
                        int v0 = ip.getPixel(x, y - 1);
                        int v1 = ip.getPixel(x, y);
                        int v2 = ip.getPixel(x, y + 1);

                        if (v0 == 0 && v1 != 0 && v2 != 0) {
                            count++;
                        }

                        if (v0 != 0 && v1 != 0 && v2 == 0) {
                            count++;
                        }
                    }
                }
            }

            int olX[] = new int[count];
            int olY[] = new int[count];
            int olV[] = new int[count];
            c = 0;

            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {
                    if (y > 0 && y < (h - 1)) {
                        int v0 = ip.getPixel(x, y - 1);
                        int v1 = ip.getPixel(x, y);
                        int v2 = ip.getPixel(x, y + 1);

                        if (v0 == 0 && v1 != 0 && v2 != 0) {

                            outlineX[c] = x;
                            outlineY[c] = y;
                            outlineV[c] = v2;
                            c++;
                        }

                        if (v0 != 0 && v1 != 0 && v2 == 0) {

                            outlineX[c] = x;
                            outlineY[c] = y;
                            outlineV[c] = v0;
                            c++;
                        }
                    }
                }
            }

            c = 0;
            for (int x = 0; x < w; x++) {
                for (int y = 0; y < h; y++) {

                    if (c < count && outlineX[c] == x && outlineY[c] == y) {

                        ip.putPixel(x, y, 0);

                        c++;
                    }
                }
            }
        }
    }

    private Roi clearOutline(ImagePlus ima) {

        imj = new Duplicator().run(ima);
        IJ.run(imj, "8-bit", "");
        IJ.setThreshold(imj, 1.0, 255.0);

        IJ.run("Set Measurements...", "area redirect=None decimal=2");
        IJ.run(imj, "Analyze Particles...",
                "size=0-Infinity circularity=0.00-1.00 show=Nothing clear record");

        imj.show();

        ResultsTable rt = Analyzer.getResultsTable();
        int count = rt.getCounter();
        int maxArea = 0;

        int xs = 0, ys = 0;

        for (int i = 0; i < count; i++) {

            int area = (int) rt.getValue("Area", i);

            if (area > maxArea) {
                maxArea = area;
                xs = (int) rt.getValue("XStart", i);
                ys = (int) rt.getValue("YStart", i);
            }
        }

        IJ.doWand(xs, ys);

        roiman = RoiManager.getInstance();
        if (roiman == null) {
            roiman = new RoiManager();
        }
        roiman.runCommand("reset");

        roiman.addRoi(imj.getRoi());
        roiman.select(imj, 0);
        roiman.runCommand("Rename", "outline");

        IJ.run(ima, "Select None", "");
        roiman.select(ima, 0);

        IJ.run(ima, "Clear Outside", "");

        Roi ol = ima.getRoi();

        Rectangle rec = ol.getBounds();

        outX = rec.x;
        outY = rec.y;
        outW = (int) rec.getWidth();
        outH = (int) rec.getHeight();

        ipm = getOutlineXY(ima);

        ipl = getAllInteriorROIs(ima);

        allOutlines = outlinesToArray(ipm, ipl);

        imj.hide();
        ipm.hide();
        ipl.hide();

        return ol;
    }

    private ImagePlus getOutlineXY(ImagePlus ima) {

        Roi ol = ima.getRoi();

        Rectangle r = ol.getBounds();
        double w = r.getWidth();
        double h = r.getHeight();
        double hypot = Math.sqrt((w * w) + (h * h));

        hypotenuse = (int) hypot;

        IJ.run(ima, "Select None", "");
        ImagePlus outer = new Duplicator().run(ima);

//        outer.show();

        outer.setTitle("outer");

        outer.setRoi(ol);

        IJ.run("Colors...", "foreground=black background=white selection=yellow");
        IJ.run(outer, "Clear", "slice");

        IJ.run("Colors...", "foreground=black background=black selection=yellow");
        try {
            IJ.run(outer, "Enlarge...", "enlarge=-1");
        } catch (Exception e) {
            dumpExtraImages();
        }
        IJ.run(outer, "Fill", "slice");
        IJ.run(outer, "Select None", "");
        IJ.resetThreshold(outer);

        return outer;

    }

    private ImagePlus getAllInteriorROIs(ImagePlus ima) {

        roiman = RoiManager.getInstance();
        if (roiman == null) {
            roiman = new RoiManager();
        }
        roiman.runCommand("reset");

        IJ.run(ima, "Select None", "");
        ImagePlus inner = new Duplicator().run(ima);

        inner.show();

        inner.setTitle("inner");

        IJ.run(inner, "8-bit", "");
        IJ.setThreshold(inner, 0, 0);

        IJ.run("Set Measurements...", "area limit redirect=None decimal=2");

        IJ.run(inner, "Analyze Particles...",
                "size=0-Infinity circularity=0.00-1.00 "
                + "show=Nothing exclude clear record add");

        ResultsTable rt = Analyzer.getResultsTable();
        int ct = rt.getCounter();

        if (ct > 0) {

            roiman.runCommand("Combine");

            IJ.run("Colors...", "foreground=black background=white selection=yellow");
            try {
                IJ.run(inner, "Clear Outside", "");
            } catch (Exception e) {
                dumpExtraImages();
            }
            try {
                IJ.run(inner, "Enlarge...", "enlarge=1");
            } catch (Exception e) {
                dumpExtraImages();
            }
            IJ.run("Colors...", "foreground=white background=black selection=yellow");
            IJ.run(inner, "Clear Outside", "");

            IJ.resetThreshold(inner);
            IJ.run(inner, "Select None", "");
            roiman.runCommand("Show None");
        }

        return inner;

    }

    private int[][] outlinesToArray(ImagePlus pm, ImagePlus pl) {

        ImageCalculator ic = new ImageCalculator();
        ImagePlus imp3 = ic.run("Add create", pm, pl);

        imp3.show();
        imp3.setTitle("combinedROIs");

        IJ.run("Set Measurements...", "area perimeter limit redirect=None decimal=2");
        IJ.run(imp3, "Measure", "");

        ResultsTable rt = Analyzer.getResultsTable();
        int ct = rt.getCounter();
        int n = ct - 1;

        dimOutline = (int) rt.getValue("Area", n);

        int[][] outlineXY = new int[dimOutline][2];

        int w = imp3.getWidth();
        int h = imp3.getHeight();
        ImageProcessor ip = imp3.getProcessor();

        int count = 0;

        for (int x = 0; x < w; x++) {
            for (int y = 0; y < h; y++) {
                int v = ip.getPixel(x, y);
                float v0 = ip.getPixelValue(x, y);
                if (v0 != 0.0) {
                    outlineXY[count][0] = x;
                    outlineXY[count][1] = y;
                    count++;

                }
            }
        }

//        imp3.hide();

        return outlineXY;

    }

    private void setLanguage() {

        String s = null;

        switch (language) {

            case 0:

                s = "1. Click and drag on the subject to change the"
                        + "\n   position."
                        + "\n2. Click and drag the handles (corners) to change "
                        + "\nthe size."
                        + "\n3. To rotate the subject, when the position and"
                        + "\n   size are correct, click the clockwise or"
                        + "\n   counterclockwise buttons."
                        + "\n4. When complete, click the \"Add a message...\""
                        + "\nor \"Just finish...\" button.";

                toInstructionWidow(s, false);
//                SetToBackgroundButton.setText("Set To Background");
                break;

            case 1:

                s = "Deutsche Anleitungen";
                toInstructionWidow(s, false);
//                SetToBackgroundButton.setText("Hintergrund");
                break;

            case 2:

                s = "Frencais parle vouis?";
                toInstructionWidow(s, false);
//                SetToBackgroundButton.setText("mis à fond");
                break;

            case 3:

                s = "istruzioni italiani";
                toInstructionWidow(s, false);
//                SetToBackgroundButton.setText("impostato su sfondo");
                break;

            case 4:

                s = "Kiswahili Inastrucions";
                toInstructionWidow(s, false);
//                SetToBackgroundButton.setText("kuweka background");
                break;

        }

    }

    private void toInstructionWidow(String s, Boolean go) {
        if (go) {
            String s1 = informationTextArea.getText();
            String s2 = "\n*******************\n";
            informationTextArea.setText(s1 + s2 + s);
        } else {
            informationTextArea.setText(s);
        }
    }

    private void dumpExtraImages() {

        int[] id = WindowManager.getIDList();
        int PCid = imp.getID();

        int c = WindowManager.getImageCount();

        for (int i = 0; i < c; i++) {

            IJ.selectWindow(id[i]);
            if (id[i] != PCid) {
                ImagePlus imj = IJ.getImage();
                imj.hide();
            }

        }

    }

    public void mouseClicked(MouseEvent me) {
    }

    public void mousePressed(MouseEvent me) {

        if (spin) {

            angle++;
            rotateSubject(angle);

        }

        if (spinback) {

            angle--;
            rotateSubject(angle);

        }
    }

    public void mouseReleased(MouseEvent me) {

        if (resize && !text) {

            IJ.run("Hide Overlay", "");

            refresh = true;

            finish();

            resize = false;

        }

    }

    public void mouseEntered(MouseEvent me) {
    }

    public void mouseExited(MouseEvent me) {
    }

    public void mouseDragged(MouseEvent me) {

        if (!text && redo) {
            resize = true;
        }

    }

    public void mouseMoved(MouseEvent me) {
    }

    private void moveWindow(ImagePlus impl, int x, int y) {

        impl.getWindow().setLocation(x, y);

    }
}
